// * Ch12 Symbol

// ? Ex.1 introduction
// ? 1.1 simple constructor
console.log('1.1 simple examples ...');
let s1 = Symbol('foo');
let s2 = Symbol('foo');
console.log(s1);
console.log(s1.toString());
console.log(s1.toString());
console.log(s1 === s2);
let s3 = Symbol({ a: 1 });
console.log(s3);
let s4 = Symbol({
    a: 1,
    toString() { return '123'; }
}.toString());
console.log(s4);

// ? 1.2 get description
console.log('\n1.2 get Symbol\'s description ...');
console.log(s1.description);

// ? Ex.2 use Symbol as attribute name
// ? 2.1 simple examples
console.log('\n2.1 use Symbol as attribute name ... ');
let obj1 = {};
obj1[s1] = 'hello!';
console.log(obj1);
console.log(obj1[s1]);

// ? 2.2 access symbol naming attribute using [], NOT . 
console.log('\n2.2 access symbol naming attribute using [], not .');
console.log(obj1.s1);

// ? 2.3 constance using symbol qarantee no override 
console.log('\n2.3 constance using symbol qarantee no override ...');
const RED = Symbol('RED');
const BLACK = Symbol('BLACK');

function flipColor(color){
    switch(color){
        case RED:
            return BLACK;
        case BLACK:
            return RED;
        default:
            throw new Error('Undefined color');
    }
}

console.log(flipColor(RED));
console.log(flipColor(BLACK));

// ? Ex.3 iterate symbol attributes
// ? 3.1 getOwnPropertySymbols
console.log('\n3.1 getOwnPropertySymbol() ... ');
let obj2 = {...obj1, ...{[s3]: '3'}};
console.log(Object.getOwnPropertySymbols(obj2));

// ? 3.2 Reflect.ownKeys()
console.log('\n3.2 Relfect.ownKeys() get symbol attributes ...');
console.log(Reflect.ownKeys(obj2));

// ? Ex.4 Symbol.for() Symbol.keyFor()
// ? 4.1 Symbol.for() put symbol in global symbol registry list
console.log('\n4.1 Symbol.for() find previous symbol through description ....');
console.log('Note: Symbol() and Symbol.for() are different, latter' + 
' put symbol in global symbol registry list');
let s6 = Symbol('baz');
let s7 = Symbol.for('baz');
let s8 = Symbol.for('baz');
console.log(s6 === s7);
console.log(s8 === s7);

// ? 4.2 Symbol.keyFor() return a description of registered symbol
console.log('\n4.2 Symbol.keyFor() return a description of registered key ...');
console.log(Symbol.keyFor(s7));
console.log('Note: Symbol generated by Symbol() are not found by .keyFor() ... ');
console.log(Symbol.keyFor(s6));

// ? 4.3 keyFor() register in GLOBAL
console.log('\n4.3 keyFor() register in GLOBAL ....');
function fn1(){
    return Symbol.for('baz');
}
let s9 = fn1();
let s10 = Symbol.for('baz');
console.log(s9 === s10);

